---
description: Здесь будет архитектура проекта, а также компоненты которые уже есть и которые еще предстоит сделать
globs: 
alwaysApply: false
---
# Обзор Проекта

Текущая реализация в [`main.py`](mdc:main.py) запускает Telegram-бота, который принимает **только файлы** от пользователей и загружает их на Google Drive.

## Ключевые Компоненты (Текущие):

*   **Точка входа**: Функция `main()` в [`main.py`](mdc:main.py) инициализирует и запускает бота.
*   **Обработка файлов**: Функция `handle_file_upload()` в [`main.py`](mdc:main.py) отвечает за получение файла из Telegram, временное сохранение и вызов функции загрузки на Google Drive.
*   **Загрузка на Google Drive**: Функция `upload_file_to_drive()` в [`main.py`](mdc:main.py) управляет аутентификацией с Google API и непосредственно загрузкой файла.

## Предлагаемая Архитектура для Полнофункционального Бота

Для реализации всего описанного функционала предлагается следующая модульная архитектура:

*   **`main.py`**: Точка входа, инициализация бота, диспетчеризация команд и сообщений.
*   **`handlers/`**: Директория с обработчиками различных команд и типов сообщений.
    *   `student_handlers.py`: Команды для студентов (`/start`, `/register`, `/submit`, `/status`, `/resubmit`). **Должен уметь принимать как файлы, так и ссылки.**
    *   `admin_handlers.py`: Команды для админов (`/admin`, `/upload_hw`, `/update_hw`).
    *   `common_handlers.py`: Общие обработчики (например, обработка текста, ссылок, ошибок).
*   **`services/`**: Директория с бизнес-логикой и интеграциями.
    *   `user_service.py`: Управление данными пользователей (регистрация, получение информации).
    *   `submission_service.py`: Логика обработки сдачи ДЗ (прием данных **файлом или ссылкой**, валидация, вызов нужных сервисов).
    *   `google_drive_service.py`: Интеграция с Google Drive API (**только для загрузки файлов**, создание папок, получение ссылок на загруженные файлы).
    *   `google_sheets_service.py`: Интеграция с Google Sheets API (создание таблиц, добавление/чтение/обновление строк).
    *   `notification_service.py`: Отправка уведомлений пользователям.
    *   `scheduler_service.py`: Управление периодическими задачами (проверка статусов, дедлайнов).
*   **`database/`**: Модули для работы с базой данных (например, SQLite).
    *   `models.py`: Определение моделей данных (User, Subject, Homework, Submission - **поле для хранения либо ссылки, либо ID файла**).
    *   `crud.py`: Функции для создания, чтения, обновления, удаления записей (CRUD).
    *   `db_init.py`: Инициализация БД.
*   **`config.py`**: Загрузка и предоставление конфигурационных данных (токены, ID папок/таблиц, настройки). Использование [`private_config.py`](mdc:private_config.py), [`client_secret.json`](mdc:client_secret.json), [`token.json`](mdc:token.json).
*   **`utils/`**: Вспомогательные функции (например, форматирование сообщений, работа с датами, **валидация URL**).
*   **`templates/`**: Шаблоны (например, шаблон Google Sheets для новых таблиц).

## План Реализации (по блокам)

Отмечайте пункты по мере их выполнения: `[ ]` -> `[x]`

**Блок 1: Базовая Настройка и Прием ДЗ** `[ ]`
*   `[x]` Настройка Telegram бота и базовой структуры проекта (директории, `main.py`).
*   `[x]` Реализация хранения данных (SQLite): модели User, Subject.
*   `[ ]` Команда `/start` и `/register`: сбор и сохранение данных студента (ID, ФИО, группа).
*   `[ ]` Начало процесса сдачи ДЗ (`/submit`): **прием как документа (файла), так и текстового сообщения со ссылкой (URL)**, запрос предмета и номера ДЗ.
*   `[ ]` Валидация ссылки (если прислана ссылка).
*   `[ ]` Сохранение базовой информации о сдаче в БД (Submission: user_id, subject, hw_number, **submission_type ('file' или 'link'), data (ссылка или ID файла/путь к временному файлу)**, status='received').

**Блок 2: Интеграция с Google Drive (Только для Файлов)** `[ ]`
*   `[ ]` Рефакторинг аутентификации Google API в `google_drive_service.py`.
*   `[ ]` Функция проверки/создания директорий на Диске (`Предмет/Номер ДЗ`).
*   `[ ]` **Если `submission_type == 'file'`:**
    *   `[ ]` Скачивание файла из Telegram (если еще не сделано).
    *   `[ ]` Загрузка файла в нужную директорию Google Drive.
    *   `[ ]` Получение постоянной ссылки на загруженный файл.
    *   `[ ]` Обновление записи в БД (Submission: **drive_link = полученная ссылка**, status='processed').
    *   `[ ]` Удаление временного файла.
*   `[ ]` **Если `submission_type == 'link'`:**
    *   `[ ]` Обновление записи в БД (Submission: **drive_link = data (исходная ссылка)**, status='processed').

**Блок 3: Интеграция с Google Sheets** `[ ]`
*   `[ ]` Аутентификация Google Sheets API (`google_sheets_service.py`).
*   `[ ]` Функция проверки/создания таблицы для предмета (поиск по ID, если нет - копирование из шаблона `templates/`). ID созданной таблицы сохранять (в `config.py` или БД?).
*   `[ ]` Функция добавления строки с данными о сдаче (ФИО, Логин ТГ, ID ТГ, **Ссылка на работу (поле `drive_link` из БД)**, Статус="На проверке").
*   `[ ]` Функция поиска/обновления строк в таблице (для обновления статуса, оценки).
*   `[ ]` Обновление статуса в БД (Submission: status='uploaded_to_sheets').

**Блок 4: Проверка Статуса ДЗ (Студент)** `[ ]`
*   `[ ]` Команда `/status`.
*   `[ ]` Кнопки/логика для запросов: "Все ДЗ", "Сданные ДЗ", "Несданные ДЗ".
*   `[ ]` Логика:
    *   Получить список всех ДЗ для студента из БД (`Homework`).
    *   Получить статусы сданных ДЗ из БД/Google Sheets (`Submission`).
    *   Сформировать ответ на основе запрошенного фильтра.

**Блок 5: Админские Функции** `[ ]`
*   `[ ]` Определение списка ID админов в `config.py`.
*   `[ ]` Декоратор или проверка `is_admin` для админских команд.
*   `[ ]` Команда `/upload_hw`:
    *   Диалог с админом (предмет, номер, ссылка на задание, дедлайн).
    *   Сохранение информации о ДЗ в БД (`Homework`).
*   `[ ]` Команда `/update_hw`:
    *   Диалог с админом (выбор ДЗ, новая ссылка/дедлайн).
    *   Обновление записи в БД (`Homework`).
*   `[ ]` (См. Блок 6) Уведомление студентов о новом/обновленном ДЗ.

**Блок 6: Уведомления и Расписание** `[ ]`
*   `[ ]` `notification_service.py`: Функция `send_message(user_id, text)`.
*   `[ ]` Интеграция уведомлений в `/upload_hw` и `/update_hw`.
*   `[ ]` `scheduler_service.py` (APScheduler или JobQueue).
*   `[ ]` Ежедневная задача: Проверка ДЗ с дедлайном завтра -> Уведомление не сдавшим студентам.
*   `[ ]` Периодическая задача (раз в час?):
    *   Прочитать все таблицы Google Sheets.
    *   Сравнить статусы/оценки с данными в БД (`Submission`).
    *   При изменении статуса на "Сдана" или появлении оценки -> Уведомить студента и обновить БД.

**Блок 7: Пересдача ДЗ** `[ ]`
*   `[ ]` Команда `/resubmit`.
*   `[ ]` Диалог с пользователем: выбор ДЗ для пересдачи.
*   `[ ]` Повторение шагов из Блока 1 (**прием файла/ссылки**) и Блока 2 (**загрузка на Диск только если файл**, получение ссылки).
*   `[ ]` Обновление строки в Google Sheets (новая ссылка, сброс оценки, статус "На перепроверке"?).
*   `[ ]` Обновление статуса в БД (`Submission`).

**Блок 8: Улучшения и Рефакторинг** `[ ]`
*   `[ ]` Глобальная обработка ошибок и логирование.
*   `[ ]` Улучшение интерфейса бота (Inline-кнопки, понятные сообщения).
*   `[ ]` Рефакторинг кода, разделение на модули согласно архитектуре.
*   `[ ]` Написание тестов (по возможности).
*   `[ ]` Документирование кода.
